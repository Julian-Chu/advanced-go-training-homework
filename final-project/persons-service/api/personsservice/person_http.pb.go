// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.1

package persons

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PersonHTTPServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonReply, error)
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonReply, error)
}

func RegisterPersonHTTPServer(s *http.Server, srv PersonHTTPServer) {
	r := s.Route("/")
	r.POST("/person", _Person_CreatePerson0_HTTP_Handler(srv))
	r.GET("/person/{email}", _Person_GetPerson0_HTTP_Handler(srv))
}

func _Person_CreatePerson0_HTTP_Handler(srv PersonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePersonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/persons.service.v1.Person/CreatePerson")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePerson(ctx, req.(*CreatePersonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePersonReply)
		return ctx.Result(200, reply)
	}
}

func _Person_GetPerson0_HTTP_Handler(srv PersonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPersonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/persons.service.v1.Person/GetPerson")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPerson(ctx, req.(*GetPersonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPersonReply)
		return ctx.Result(200, reply)
	}
}

type PersonHTTPClient interface {
	CreatePerson(ctx context.Context, req *CreatePersonRequest, opts ...http.CallOption) (rsp *CreatePersonReply, err error)
	GetPerson(ctx context.Context, req *GetPersonRequest, opts ...http.CallOption) (rsp *GetPersonReply, err error)
}

type PersonHTTPClientImpl struct {
	cc *http.Client
}

func NewPersonHTTPClient(client *http.Client) PersonHTTPClient {
	return &PersonHTTPClientImpl{client}
}

func (c *PersonHTTPClientImpl) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...http.CallOption) (*CreatePersonReply, error) {
	var out CreatePersonReply
	pattern := "/person"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/persons.service.v1.Person/CreatePerson"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PersonHTTPClientImpl) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...http.CallOption) (*GetPersonReply, error) {
	var out GetPersonReply
	pattern := "/person/{email}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/persons.service.v1.Person/GetPerson"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
